
/* IMPORT */

import bin from '../dist/index.js';

/* MAIN */

//TODO: Write automated tests also

bin ( 'bump', 'Update a project\'s version number' )
  // .colors ( false )
  // .package ( '@fabiospampinato/bump', '1.2.3' )
  // .autoExit ( false )
  // .usage ( 'Custom usage string' )
  // .usage ( 'Other usage string' )
  .option ( '--config, -c, -d <path|object>', 'Path to configuration file or plain JSON object', { section: 'General' } )
  .option ( '-f, --force', 'Force the command without prompting the user', { section: 'General' } )
  .option ( '--force', 'Force the command without prompting the user', { section: 'General' } )
  .option ( '--silent <hi...>', 'Minimize the amount of logs', { section: 'General' } )
  .option ( '--no-scripts', 'Disable scripts', { section: 'Script' } )
  .option ( '--compound-option', 'Camel cased option' )
  .option ( '--hidden', 'Very hidden', { hidden: true } )
  .option ( '--prebump <script>', 'Script to execute before bumping the version', { section: 'Script' } )
  .option ( '--prechangelog <script>', 'Script to execute before updating the changelog', { section: 'Script' } )
  .option ( '--precommit <script>', 'Script to execute before making the commit', { section: 'Script' } )
  .option ( '--pretag <script>', 'Script to execute before takking the commit', { section: 'Script' } )
  .option ( '--prerelease <script>', 'Script to execute before releasing', { section: 'Script' } )
  .option ( '--postbump <script>', 'Script to execute after bumping the version', { section: 'script' } )
  .option ( '--postchangelog <script>', 'Script to execute after updating the changelog', { section: 'script' } )
  .option ( '--postcommit <script>', 'Script to execute after making the commit', { section: 'script' } )
  .option ( '--posttag <script>', 'Script to execute after tagging the commit', { section: 'script' } )
  .option ( '--postrelease <script>', 'Script to execute after releasing', { section: 'script' } )
  .option ( '--vw <古池や古池や古池>', 'Some option testing variable width detection' )
  .option ( '-n <names...>', 'Some variadic eager option', { eager: true } )
  .option ( '--unary <num>', 'Some unary option', { type: 'number' } )
  .option ( '--enum <foo|bar|baz>', 'Some enum value', { enum: ['foo', 'bar', 'baz'] } )
  // .option ( '--lines', 'This is a meta option\nThis causes descriptions to be aligned' )
  .option ( '--lines', 'This is a meta option. This causes descriptions to be aligned\n\n\n' )
  // .option ( '-n <names...>', 'Some variadic non-eager option', { eager: false } )
  .option ( '--deep.dotted', 'This is a dotted option' )
  .option ( '-.', 'This is a special-looking dot-only option' )
  .option ( '--incompatible-one', 'A flag that is incompatible with --incompatible-two', { incompatible: 'incompatible-two' } )
  .option ( '--incompatible-two', 'A flag that is incompatible with --incompatible-one', { incompatible: 'incompatible-one' } )
  .option ( '--deprecated1 <foo>', 'A deprecated option', { deprecated: true } )
  .option ( '--deprecated2 <foo...>', 'A deprecated option', { deprecated: true } )
  .option ( '--force-boolean', 'Forced type to boolean', { type: 'boolean' } )
  .option ( '--force-integer', 'Forced type to integer', { type: 'integer' } )
  .option ( '--force-number', 'Forced type to number', { type: 'number' } )
  .option ( '--force-string', 'Forced type to string', { type: 'string' } )
  .option ( '--validated-odd <num>', 'Custom validated odd flag', { validate: value => value % 2 === 1 } )
  .option ( '--validated-even <num>', 'Custom validated even flag', { validate: value => value % 2 === 0 } )
  .argument ( '[version...]', 'asd' )
  // .argument ( '[foo]', 'asdasdasdasdasdasd' )
  // .argument ( '[version|foo]', 'asdasdasdasdasdasd' )
  .action ( ( ...args ) => console.log(args) )
  .command ( 'version', 'Only bump the version number' )
  .argument ( '[version|increment]', 'Something' )
  .action ( () => console.log ( 'version' ) )
  .command ( 'changelog', 'Only update the changelog' )
  .option ( '--length <number>', 'Script to execute after releasing', { required: true } )
  .option ( '--some-thing <name>', 'asd' )
  .option ( '--fallback <asd>', 'Some fallback value', { default: 123 } )
  // .argument ( '<foo...>', 'Something' )
  // .argument ( '[bar]', 'Something else' )
  .action ( (...args) => console.log ( 'changelog', args ) )
  .command ( 'commit', 'Only make the commit' )
  .action ( () => console.log ( 'commit' ) )
  .command ( 'tag', 'Only tag the commit' )
  .action ( () => console.log ( 'tag' ) )
  .command ( 'release', 'Only make the release', { section: 'Publish' } )
  .action ( () => console.log ( 'release' ) )
  .command ( 'wait', 'Wait a bit', { section: 'Extra' } )
  .action ( () => new Promise ( res => setTimeout ( res, 1000 ) ) )
  .command ( 'deprecated', 'A deprecated command', { deprecated: true } )
  .argument ( '[arg]', 'Argument' )
  .action ( () => console.log ( 'deprecated' ) )
  .run ();
